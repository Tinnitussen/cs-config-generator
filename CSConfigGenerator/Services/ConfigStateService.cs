using System.Text;
using CSConfigGenerator.Models;
using CSConfigGenerator.Interfaces;

namespace CSConfigGenerator.Services;

public class ConfigStateService : IConfigStateService
{
    private readonly ISchemaService _schemaService;
    private readonly Dictionary<string, Setting> _settings = [];

    public event Action<object?>? OnStateChange;
    public IReadOnlyDictionary<string, Setting> Settings => _settings.AsReadOnly();

    public ConfigStateService(ISchemaService schemaService)
    {
        _schemaService = schemaService;
    }

    public virtual void InitializeDefaults()
    {
        _settings.Clear();

        var allSections = _schemaService.PlayerSections.Concat(_schemaService.ServerSections);
        foreach (var section in allSections)
        {
            foreach (var command in section.Commands)
            {
                // Avoid adding duplicates if a command exists in both player and server sections
                if (!_settings.ContainsKey(command.Command))
                {
                    var defaultValue = SettingTypeHelpers.ConvertFromJson(command.UiData.Type, command.UiData.DefaultValue);
                    _settings[command.Command] = new Setting
                    {
                        Value = defaultValue,
                        IsInConfigEditor = true
                    };
                }
            }
        }

        NotifyStateChanged();
    }

    private CommandDefinition? GetCommandDefinition(string commandName) => _schemaService.GetCommand(commandName);

    protected void NotifyStateChanged(object? originator = null)
    {
        OnStateChange?.Invoke(originator);
    }

    public Setting GetSetting(string commandName)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            return setting;
        }

        throw new ArgumentException($"Command '{commandName}' not found.");
    }

    public string GenerateConfigFile(string configType)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// Generated by CS Config Generator");
        builder.AppendLine($"// Generated on: {DateTimeOffset.Now:yyyy-MM-dd HH:mm:ss}");

        IReadOnlyList<ConfigSection> sections;
        if (string.Equals(configType, "player", StringComparison.OrdinalIgnoreCase))
        {
            builder.AppendLine("// Player Configuration");
            sections = _schemaService.PlayerSections;
        }
        else
        {
            builder.AppendLine("// Server Configuration");
            sections = _schemaService.ServerSections;
        }
        builder.AppendLine();


        foreach (var section in sections.OrderBy(s => s.DisplayName))
        {
            var sectionHasContent = false;

            foreach (var command in section.Commands.OrderBy(c => c.Command))
            {
                if (_settings.TryGetValue(command.Command, out var setting) && setting.IsInConfigEditor)
                {
                    if (!sectionHasContent)
                    {
                        builder.AppendLine($"// {section.DisplayName} Settings");
                        sectionHasContent = true;
                    }
                    var formattedValue = SettingTypeHelpers.FormatForConfig(command.UiData.Type, setting.Value);
                    builder.AppendLine($"{command.Command} {formattedValue}");
                }
            }

            if (sectionHasContent) builder.AppendLine();
        }

        return builder.ToString();
    }

    public void ParseConfigFile(string configText, object? originator = null)
    {
        var lines = configText.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
        var commandsInFile = new HashSet<string>();

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("//"))
                continue;

            var firstSpaceIndex = trimmedLine.IndexOf(' ');
            if (firstSpaceIndex <= 0) continue;

            var commandName = trimmedLine[..firstSpaceIndex].Trim();
            var valueStr = trimmedLine[(firstSpaceIndex + 1)..].Trim().Trim('"');

            // Step 1: Check if this is a valid command
            var command = GetCommandDefinition(commandName);
            if (command == null) continue;

            commandsInFile.Add(commandName);

            // Step 2: Validate the value against the command's type
            var (isValid, _) = SettingValidator.Validate(command.UiData.Type, valueStr);
            if (!isValid) continue; // Skip invalid values

            // Step 3: Parse the value (now we know it's valid)
            var parsedValue = SettingTypeHelpers.ParseFromString(command.UiData.Type, valueStr);

            // Step 4: Update the setting
            if (_settings.TryGetValue(commandName, out var setting))
            {
                setting.Value = parsedValue;
                // If a command is present in the file, it is considered included.
                setting.IsInConfigEditor = true;
            }
        }

        // For any setting that was NOT in the config file, mark it as not included.
        foreach (var (commandName, setting) in _settings)
        {
            if (!commandsInFile.Contains(commandName))
            {
                setting.IsInConfigEditor = false;
            }
        }

        NotifyStateChanged(originator);
    }

    public void SetValue(string commandName, object value, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            // Get the command definition to validate against
            var commandDef = GetCommandDefinition(commandName);
            if (commandDef != null)
            {
                // Convert the value to the appropriate type
                var typedValue = SettingTypeHelpers.ConvertToType(commandDef.UiData.Type, value);

                // Only update if the value has changed
                if (!setting.Value.Equals(typedValue))
                {
                    setting.Value = typedValue;
                    NotifyStateChanged(originator);
                }
            }
            else if (!setting.Value.Equals(value)) // Fallback if no command definition
            {
                setting.Value = value;
                NotifyStateChanged(originator);
            }
        }
    }

    public (bool, string?) TrySetValueFromString(string commandName, string valueStr, object? originator = null)
    {
        var commandDef = GetCommandDefinition(commandName);
        if (commandDef == null)
        {
            return (false, "Invalid command.");
        }

        var (isValid, errorMessage) = SettingValidator.Validate(commandDef.UiData.Type, valueStr);
        if (!isValid)
        {
            return (false, errorMessage);
        }

        var parsedValue = SettingTypeHelpers.ParseFromString(commandDef.UiData.Type, valueStr);
        SetValue(commandName, parsedValue, originator);

        return (true, null);
    }

    public void SetIncluded(string commandName, bool IsInConfigEditor, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            if (setting.IsInConfigEditor != IsInConfigEditor)
            {
                setting.IsInConfigEditor = IsInConfigEditor;
                NotifyStateChanged(originator);
            }
        }
    }

    public void ResetToDefaults()
    {
        InitializeDefaults();
    }
}
