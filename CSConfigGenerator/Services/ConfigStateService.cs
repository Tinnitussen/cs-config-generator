using System.Globalization;
using System.Text;
using CSConfigGenerator.Models;

namespace CSConfigGenerator.Services;

public class ConfigStateService
{
    public ConfigSettings CurrentSettings { get; private set; } = new();
    public event Action? OnStateChange;
    public float MouseSensitivity
    {
        get => CurrentSettings.MouseSensitivity;
        set
        {
            // Update the value and notify all subscribers in one step
            CurrentSettings.MouseSensitivity = value;
            NotifyStateChanged();
        }
    }
    public string CrossHairColor
    {
        get => CurrentSettings.CrossHairColor;
        set
        {
            // Update the value and notify all subscribers in one step
            CurrentSettings.CrossHairColor = value;
            NotifyStateChanged();
        }
    }
    public void UpdateSettings(ConfigSettings newSettings)
    {
        CurrentSettings = newSettings;
        NotifyStateChanged();
    }
    public string GenerateConfigFile()
    {
        var builder = new StringBuilder();
        builder.AppendLine("// Generated by CS Config Generator");
        var sensitivityString = CurrentSettings.MouseSensitivity.ToString(CultureInfo.InvariantCulture);
        builder.AppendLine($"sensitivity \"{sensitivityString}\"");
        builder.AppendLine($"crosshaircolor \"{CurrentSettings.CrossHairColor}\"");

        return builder.ToString();
    }
    public void ParseAndUpdateState(string rawConfig)
    {
        // Simple parsing logic example
        var lines = rawConfig.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in lines)
        {
            // Skip comments
            if (line.Trim().StartsWith("//")) continue;

            var parts = line.Split([' '], 2);
            if (parts.Length < 2) continue;

            var command = parts[0].Trim().ToLowerInvariant();
            var value = parts[1].Trim().Replace("\"", "");

            Console.WriteLine($"Parsing command: {command}, value: {value}");
            if (command == "sensitivity" && float.TryParse(value, CultureInfo.InvariantCulture,out var sens))
            {
                CurrentSettings.MouseSensitivity = sens;
            }
            if (command == "crosshaircolor")
            {
                CurrentSettings.CrossHairColor = value;
            }
            NotifyStateChanged();
        }
    }
    private void NotifyStateChanged() => OnStateChange?.Invoke();

}