using System.Text;
using CSConfigGenerator.Models;

namespace CSConfigGenerator.Services;

public class ConfigStateService(ISchemaService schemaService) : IConfigStateService
{
    private readonly ISchemaService _schemaService = schemaService;
    private readonly Dictionary<string, Setting> _settings = [];

    public event Action<object?>? OnStateChange;
    public IReadOnlyDictionary<string, Setting> Settings => _settings.AsReadOnly();

    public void InitializeDefaults()
    {
        _settings.Clear();

        foreach (var section in _schemaService.Sections)
        {
            foreach (var command in section.Commands)
            {
                var defaultValue = SettingTypeHelpers.ConvertFromJson(command.Type, command.DefaultValue);
                _settings[command.Name] = new Setting
                {
                    Value = defaultValue,
                    IsInConfigEditor = !command.HideFromDefaultView
                };
            }
        }

        NotifyStateChanged();
    }
    
    private void NotifyStateChanged(object? originator = null)
    {
        OnStateChange?.Invoke(originator);
    }

    public Setting GetSetting(string commandName)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            return setting;
        }

        throw new ArgumentException($"Command '{commandName}' not found.");
    }

    public string GenerateConfigFile()
    {
        var builder = new StringBuilder();
        builder.AppendLine("// Generated by CS Config Generator");
        builder.AppendLine($"// Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        builder.AppendLine();

        foreach (var section in _schemaService.Sections.OrderBy(s => s.DisplayName))
        {
            var sectionHasContent = false;
            
            foreach (var command in section.Commands.OrderBy(c => c.Name))
            {
                if (_settings.TryGetValue(command.Name, out var setting) && setting.IsInConfigEditor)
                {
                    if (!sectionHasContent)
                    {
                        builder.AppendLine($"// {section.DisplayName} Settings");
                        sectionHasContent = true;
                    }
                    var formattedValue = SettingTypeHelpers.FormatForConfig(command.Type, setting.Value);
                    builder.AppendLine($"{command.Name} {formattedValue}");
                }
            }
            
            if(sectionHasContent) builder.AppendLine();
        }

        return builder.ToString();
    }

    public void ParseConfigFile(string configText, object? originator = null)
    {
        var lines = configText.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
        var commandsInFile = new HashSet<string>();

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("//")) 
                continue;

            var firstSpaceIndex = trimmedLine.IndexOf(' ');
            if (firstSpaceIndex <= 0) continue;

            var commandName = trimmedLine[..firstSpaceIndex].Trim();
            var valueStr = trimmedLine[(firstSpaceIndex + 1)..].Trim().Trim('"');

            var command = _schemaService.GetCommand(commandName);
            if (command == null) continue;
            
            commandsInFile.Add(commandName);

            try
            {
                var parsedValue = SettingTypeHelpers.ParseFromString(command.Type, valueStr);
                if (_settings.TryGetValue(commandName, out var setting))
                {
                    setting.Value = parsedValue;
                    // If a command is present in the file, it is considered included.
                    setting.IsInConfigEditor = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing value '{valueStr}' for command '{commandName}': {ex.Message}");
            }
        }
        
        // For any setting that was NOT in the config file, mark it as not included.
        foreach (var (commandName, setting) in _settings)
        {
            if (!commandsInFile.Contains(commandName))
            {
                setting.IsInConfigEditor = false;
            }
        }

        NotifyStateChanged(originator);
    }

    public void SetValue(string commandName, object value, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            if (!setting.Value.Equals(value))
            {
                setting.Value = value;
                NotifyStateChanged(originator);
            }
        }
    }
    
    public void SetIncluded(string commandName, bool IsInConfigEditor, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            if (setting.IsInConfigEditor != IsInConfigEditor)
            {
                setting.IsInConfigEditor = IsInConfigEditor;
                NotifyStateChanged(originator);
            }
        }
    }

    public void ResetToDefaults()
    {
        InitializeDefaults();
    }
}