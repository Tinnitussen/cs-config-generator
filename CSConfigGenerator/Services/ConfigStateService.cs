using System.Text;
using CSConfigGenerator.Models;

namespace CSConfigGenerator.Services;

public class ConfigStateService(ISchemaService schemaService) : IConfigStateService
{
    private readonly ISchemaService _schemaService = schemaService;
    private readonly Dictionary<string, Setting> _settings = [];

    public event Action<object?>? OnStateChange;
    public IReadOnlyDictionary<string, Setting> Settings => _settings.AsReadOnly();

    public void InitializeDefaults()
    {
        _settings.Clear();
        
        foreach (var section in _schemaService.Sections)
        {
            foreach (var command in section.Commands)
            {
                var defaultValue = SettingTypeHelpers.ConvertFromJson(command.Type, command.DefaultValue);
                _settings[command.Name] = new Setting
                {
                    Value = defaultValue,
                    Status = command.HideFromDefaultView ? SettingStatus.Hidden : SettingStatus.Visible
                };
            }
        }
        
        NotifyStateChanged();
    }

    public void UpdateSetting(string commandName, Action<Setting> updateAction, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            updateAction(setting);
            NotifyStateChanged(originator);
        }
    }
    
    private void NotifyStateChanged(object? originator = null)
    {
        OnStateChange?.Invoke(originator);
    }

    public Setting GetSetting(string commandName)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            return setting;
        }

        throw new ArgumentException($"Command '{commandName}' not found.");
    }

    public string GenerateConfigFile()
    {
        var builder = new StringBuilder();
        builder.AppendLine("// Generated by CS Config Generator");
        builder.AppendLine($"// Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        builder.AppendLine();

        foreach (var section in _schemaService.Sections.OrderBy(s => s.DisplayName))
        {
            var sectionHasContent = false;
            
            foreach (var command in section.Commands.OrderBy(c => c.Name))
            {
                if (_settings.TryGetValue(command.Name, out var setting) && 
                    (setting.Status == SettingStatus.Visible || setting.Status == SettingStatus.Added))
                {
                    if (!sectionHasContent)
                    {
                        builder.AppendLine($"// {section.DisplayName} Settings");
                        sectionHasContent = true;
                    }
                    var formattedValue = SettingTypeHelpers.FormatForConfig(command.Type, setting.Value);
                    builder.AppendLine($"{command.Name} {formattedValue}");
                }
            }
            
            if(sectionHasContent) builder.AppendLine();
        }

        return builder.ToString();
    }

    public void ParseConfigFile(string configText, object? originator = null)
    {
        var lines = configText.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
        var commandsInFile = new HashSet<string>();

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("//")) 
                continue;

            var firstSpaceIndex = trimmedLine.IndexOf(' ');
            if (firstSpaceIndex <= 0) continue;

            var commandName = trimmedLine[..firstSpaceIndex].Trim();
            var valueStr = trimmedLine[(firstSpaceIndex + 1)..].Trim().Trim('"');

            var command = _schemaService.GetCommand(commandName);
            if (command == null) continue;
            
            commandsInFile.Add(commandName);

            try
            {
                var parsedValue = SettingTypeHelpers.ParseFromString(command.Type, valueStr);
                if (_settings.TryGetValue(commandName, out var setting))
                {
                    setting.Value = parsedValue;
                    if (setting.Status == SettingStatus.Hidden)
                    {
                        setting.Status = SettingStatus.Added;
                    }
                    else if(setting.Status == SettingStatus.Removed)
                    {
                        setting.Status = SettingStatus.Visible;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing value '{valueStr}' for command '{commandName}': {ex.Message}");
            }
        }
        
        foreach (var (commandName, setting) in _settings)
        {
            if (commandsInFile.Contains(commandName)) continue;

            if (setting.Status == SettingStatus.Visible)
            {
                setting.Status = SettingStatus.Removed;
            }
            else if (setting.Status == SettingStatus.Added)
            {
                setting.Status = SettingStatus.Hidden;
            }
        }

        NotifyStateChanged(originator);
    }

    public void SetValue(string commandName, object value, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            // Business logic: only update if value actually changed
            if (!setting.Value.Equals(value))
            {
                setting.Value = value;
                NotifyStateChanged(originator);
            }
        }
    }

    public void AddSetting(string commandName, object? originator = null) 
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            setting.Status = setting.Status == SettingStatus.Hidden ? SettingStatus.Added : SettingStatus.Visible;
            NotifyStateChanged(originator);
        }
    }

    public void RemoveSetting(string commandName, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            setting.Status = setting.Status == SettingStatus.Added ? SettingStatus.Hidden : SettingStatus.Removed;
            NotifyStateChanged(originator);
        }
    }

    public void RestoreSetting(string commandName, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            setting.Status = SettingStatus.Visible;
            NotifyStateChanged(originator);
        }
    }

    public void ResetToDefaults()
    {
        InitializeDefaults();
    }
}