using System.Globalization;
using System.Text;
using System.Text.Json;
using CSConfigGenerator.Models;

namespace CSConfigGenerator.Services;

public class ConfigStateService(ISchemaService schemaService) : IConfigStateService
{
    private readonly ISchemaService _schemaService = schemaService;
    private readonly Dictionary<string, Setting> _settings = [];

    public event Action<object?>? OnStateChange;
    public IReadOnlyDictionary<string, Setting> Settings => _settings.AsReadOnly();

    public void InitializeDefaults()
    {
        _settings.Clear();
        
        foreach (var section in _schemaService.Sections)
        {
            foreach (var command in section.Commands)
            {
                var defaultValue = ConvertJsonValue(command.DefaultValue, command.Type);
                _settings[command.Name] = new Setting
                {
                    Value = defaultValue,
                    Status = command.HideFromDefaultView ? SettingStatus.Hidden : SettingStatus.Visible
                };
            }
        }
        
        NotifyStateChanged();
    }

    public void UpdateSetting(string commandName, Action<Setting> updateAction, object? originator = null)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            updateAction(setting);
            NotifyStateChanged(originator);
        }
    }
    
    private void NotifyStateChanged(object? originator = null)
    {
        OnStateChange?.Invoke(originator);
    }

    public Setting GetSetting(string commandName)
    {
        if (_settings.TryGetValue(commandName, out var setting))
        {
            return setting;
        }

        throw new ArgumentException($"Command '{commandName}' not found.");
    }

    public string GenerateConfigFile()
    {
        var builder = new StringBuilder();
        builder.AppendLine("// Generated by CS Config Generator");
        builder.AppendLine($"// Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        builder.AppendLine();

        foreach (var section in _schemaService.Sections.OrderBy(s => s.DisplayName))
        {
            var sectionHasContent = false;
            
            foreach (var command in section.Commands.OrderBy(c => c.Name))
            {
                if (_settings.TryGetValue(command.Name, out var setting) && 
                    (setting.Status == SettingStatus.Visible || setting.Status == SettingStatus.Added))
                {
                    if (!sectionHasContent)
                    {
                        builder.AppendLine($"// {section.DisplayName} Settings");
                        sectionHasContent = true;
                    }
                    var formattedValue = FormatValueForConfig(setting.Value);
                    builder.AppendLine($"{command.Name} {formattedValue}");
                }
            }
            
            if(sectionHasContent) builder.AppendLine();
        }

        return builder.ToString();
    }

    public void ParseConfigFile(string configText, object? originator = null)
    {
        var lines = configText.Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries);
        var commandsInFile = new HashSet<string>();

        // First pass: update settings based on the file content
        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("//")) 
                continue;

            var firstSpaceIndex = trimmedLine.IndexOf(' ');
            if (firstSpaceIndex <= 0) continue;

            var commandName = trimmedLine[..firstSpaceIndex].Trim();
            var valueStr = trimmedLine[(firstSpaceIndex + 1)..].Trim().Trim('"');

            var command = _schemaService.GetCommand(commandName);
            if (command == null) continue;
            
            commandsInFile.Add(commandName);

            try
            {
                var parsedValue = ParseValueFromString(valueStr, command.Type);
                if (_settings.TryGetValue(commandName, out var setting))
                {
                    setting.Value = parsedValue;
                    if (setting.Status == SettingStatus.Hidden)
                    {
                        setting.Status = SettingStatus.Added;
                    }
                    else if(setting.Status == SettingStatus.Removed)
                    {
                        setting.Status = SettingStatus.Visible;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing value '{valueStr}' for command '{commandName}': {ex.Message}");
            }
        }
        
        // Second pass: update status for settings that were removed from the text
        foreach (var (commandName, setting) in _settings)
        {
            if (commandsInFile.Contains(commandName)) continue;

            if (setting.Status == SettingStatus.Visible)
            {
                setting.Status = SettingStatus.Removed;
            }
            else if (setting.Status == SettingStatus.Added)
            {
                setting.Status = SettingStatus.Hidden;
            }
        }

        NotifyStateChanged(originator);
    }

    public void ResetToDefaults()
    {
        InitializeDefaults();
    }

    private static object ConvertJsonValue(JsonElement element, string type)
    {
        return type.ToLower() switch
        {
            "bool" => element.GetBoolean(),
            "int" => element.GetInt32(),
            "float" => element.GetSingle(),
            "string" => element.GetString() ?? string.Empty,
            "enum" => element.GetString() ?? string.Empty,
            _ => throw new ArgumentException($"Unsupported type: {type}")
        };
    }

    private static object ConvertToType(object value, string type)
    {
        return type.ToLower() switch
        {
            "bool" => Convert.ToBoolean(value),
            "int" => Convert.ToInt32(value),
            "float" => Convert.ToSingle(value),
            "string" => value.ToString() ?? string.Empty,
            "enum" => value.ToString() ?? string.Empty,
            _ => throw new ArgumentException($"Unsupported type: {type}")
        };
    }

    private static object ParseValueFromString(string valueStr, string type)
    {
        return type.ToLower() switch
        {
            "bool" => valueStr is "1" or "true",
            "int" => int.Parse(valueStr, CultureInfo.InvariantCulture),
            "float" => float.Parse(valueStr, CultureInfo.InvariantCulture),
            "string" => valueStr,
            "enum" => valueStr,
            _ => throw new ArgumentException($"Unsupported type: {type}")
        };
    }

    private static string FormatValueForConfig(object value)
    {
        switch (value)
        {
            case bool b:
                return b ? "true" : "false";

            case float f:
                return f.ToString(CultureInfo.InvariantCulture);

            case int i:
                return i.ToString(CultureInfo.InvariantCulture);

            case string s:
                if (s.Contains(' ') || s.Contains(';'))
                {
                    return $"\"{s}\"";
                }
                return s;
            default:
                throw new ArgumentException($"Unsupported type for config file generation: {value.GetType().Name}");
        }
    }
}