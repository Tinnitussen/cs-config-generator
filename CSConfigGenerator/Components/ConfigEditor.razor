@using CSConfigGenerator.Components
@using CSConfigGenerator.Interfaces
@using CSConfigGenerator.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject IPresetService PresetService
@inject IUserConfigService UserConfigService
@inject IToastService ToastService
@implements IDisposable

<div class="config-editor">
    <div class="config-editor-header">
        <h3>Config Preview</h3>
        <div class="config-editor-actions">
            @if (PresetType != null)
            {
                <div class="custom-select-wrapper">
                    <select class="custom-select" @bind="_selectedPreset" @bind:after="OnPresetSelected">
                        <option value="">Pro Configs</option>
                        @foreach (var preset in _presets)
                        {
                            <option value="@preset">@preset</option>
                        }
                    </select>
                </div>
            }
            <div class="custom-select-wrapper">
                <select class="custom-select" @bind="_selectedUserConfig" @bind:after="OnUserConfigSelected">
                    <option value="">My Configs</option>
                    @foreach (var config in _userConfigs)
                    {
                        <option value="@config">@config</option>
                    }
                </select>
            </div>
            <button class="btn btn-sm btn-outline-success" @onclick="SaveConfig" title="Save current config">
                <i class="bi bi-save"></i>
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="CopyToClipboard" title="Copy to clipboard">
                @if (copied)
                {
                    <i class="bi bi-check-lg"></i>
                }
                else
                {
                    <i class="bi bi-clipboard"></i>
                }
            </button>
            <InputFile OnChange="OnUpload" class="d-none" @ref="_inputFile" accept=".cfg" />
            <button class="btn btn-sm btn-outline-info" @onclick="TriggerUpload" title="Upload a config file">
                <i class="bi bi-upload"></i>
            </button>
            <button class="btn btn-sm btn-outline-info" @onclick="DownloadConfig" title="Download current config">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ResetToDefaults" title="Reset to defaults">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <textarea class="form-control config-editor-textarea"
              @oninput="OnTextInput"
              value="@configText"
              placeholder="Your generated config will appear here..."
              spellcheck="false" />
</div>

<Modal Title="Save Config" IsOpen="@isSaveModalVisible" OnCancel="CloseSaveModal">
    <Body>
        <div class="modal-body">
            <input type="text" class="form-control" @bind-value="configNameToSave" @onkeydown="HandleSaveModalKeyDown" placeholder="Enter name..." />
        </div>
    </Body>
    <Footer>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
            <button type="button" class="btn btn-primary" @onclick="HandleSaveModalSubmit">Save</button>
        </div>
    </Footer>
</Modal>

<Modal Title="@_confirmationTitle" IsOpen="@_isConfirmationVisible" OnCancel="CancelConfirmation">
    <Body>
        <div class="modal-body">
            @_confirmationMessage
        </div>
    </Body>
    <Footer>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CancelConfirmation">Cancel</button>
            <button type="button" class="btn btn-danger" @onclick="ConfirmAction">Confirm</button>
        </div>
    </Footer>
</Modal>

@code {
    [Inject]
    private IConfigStateService ConfigStateService { get; set; } = default!;

    [Parameter]
    public string? PresetType { get; set; }

    private string configText = string.Empty;
    private bool copied = false;
    private List<string> _presets = new();
    private List<string> _userConfigs = new();
    private InputFile? _inputFile;
    private bool isSaveModalVisible = false;
    private string configNameToSave = "";
    private string _selectedPreset = "";
    private string _selectedUserConfig = "";

    private bool _isConfirmationVisible = false;
    private string _confirmationTitle = "";
    private string _confirmationMessage = "";
    private Action? _confirmedAction;
    private Action? _cancelAction;

    protected override async Task OnInitializedAsync()
    {
        if (ConfigStateService == null)
            throw new InvalidOperationException("ConfigStateService is not set on ConfigEditor.");

        RefreshConfigText();
        ConfigStateService.OnStateChange += HandleStateChange;

        if (PresetType != null)
        {
            _presets = await PresetService.GetPresetNamesAsync(PresetType);
            await LoadUserConfigs();
        }
    }

    private void OnPresetSelected()
    {
        if (string.IsNullOrEmpty(_selectedPreset))
        {
            return;
        }

        var presetName = _selectedPreset;
        ShowConfirmation("Load Preset", $"Are you sure you want to load the preset '{presetName}'? Any unsaved changes will be lost.", async () =>
        {
            var presetContent = await PresetService.GetPresetContentAsync(PresetType!, presetName);
            if (!string.IsNullOrEmpty(presetContent))
            {
                ConfigStateService.ParseConfigFile(presetContent, this);
                RefreshConfigText();
            }
            _selectedPreset = "";
            StateHasChanged();
        }, () =>
        {
            _selectedPreset = "";
            StateHasChanged();
        });
    }

    private void OnUserConfigSelected()
    {
        if (string.IsNullOrEmpty(_selectedUserConfig))
        {
            return;
        }

        var configName = _selectedUserConfig;
        ShowConfirmation("Load User Config", $"Are you sure you want to load '{configName}'? Any unsaved changes will be lost.", async () =>
        {
            var configContent = await UserConfigService.GetConfigContentAsync(PresetType!, configName);
            if (!string.IsNullOrEmpty(configContent))
            {
                ConfigStateService.ParseConfigFile(configContent, this);
                RefreshConfigText();
            }
            _selectedUserConfig = "";
            StateHasChanged();
        }, () =>
        {
            _selectedUserConfig = "";
            StateHasChanged();
        });
    }

    private async Task LoadUserConfigs()
    {
        if (PresetType != null)
        {
            _userConfigs = await UserConfigService.GetConfigNamesAsync(PresetType);
            StateHasChanged();
        }
    }

    private async Task SaveConfig()
    {
        isSaveModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSaveModalSubmit()
    {
        if (!string.IsNullOrEmpty(configNameToSave) && PresetType != null)
        {
            await UserConfigService.SaveConfigAsync(PresetType, configNameToSave, configText);
            await LoadUserConfigs();
            ToastService.ShowToast($"Config '{configNameToSave}' saved successfully.", ToastLevel.Success);
            await CloseSaveModal();
        }
    }

    private async Task CloseSaveModal()
    {
        isSaveModalVisible = false;
        configNameToSave = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSaveModalKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSaveModalSubmit();
        }
        else if (e.Key == "Escape")
        {
            await CloseSaveModal();
        }
    }

    private async Task OnUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            return;
        }

        ShowConfirmation("Upload Config", $"Are you sure you want to load config from '{file.Name}'? Any unsaved changes will be lost.", async () =>
        {
            try
            {
                using var stream = file.OpenReadStream(file.Size);
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();
                ConfigStateService.ParseConfigFile(content, this);
                RefreshConfigText();
                StateHasChanged();
                ToastService.ShowToast($"Config '{file.Name}' uploaded successfully.", ToastLevel.Success);
            }
            catch (Exception ex)
            {
                ToastService.ShowToast($"Error uploading file: {ex.Message}", ToastLevel.Error);
            }
        });

        // Clear the file input so the same file can be selected again
        if (_inputFile?.Element != null)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('input[type=file]').value = ''");
        }
    }

    private async Task DownloadConfig()
    {
        if (PresetType != null)
        {
            var fileName = $"{PresetType}_config.cfg";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, configText);
            ToastService.ShowToast("Config downloaded successfully.", ToastLevel.Success);
        }
    }

    private async Task TriggerUpload()
    {
        if (_inputFile?.Element != null)
        {
            await JSRuntime.InvokeVoidAsync("clickElement", _inputFile.Element);
        }
    }

    private void HandleStateChange(object? originator)
    {
        if (originator != this)
        {
            RefreshConfigText();
            StateHasChanged();
        }
    }

    private void RefreshConfigText()
    {
        if (PresetType != null)
        {
            configText = ConfigStateService.GenerateConfigFile(PresetType);
        }
        else
        {
            configText = "// Select a config type to see the preview";
        }
    }

    private void OnTextInput(ChangeEventArgs e)
    {
        string? newValue = e.Value?.ToString();
        if (newValue != null && newValue != configText)
        {
            configText = newValue;
            try
            {
                ConfigStateService.ParseConfigFile(configText, this);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing config: {ex.Message}");
            }
        }
    }

    private void ResetToDefaults()
    {
        ShowConfirmation("Reset to Defaults", "Are you sure you want to reset all values to their defaults? This action cannot be undone.", () =>
        {
            ConfigStateService.ResetToDefaults();
            ToastService.ShowToast("Config reset to default values.", ToastLevel.Info);
            StateHasChanged();
        });
    }

    private async Task CopyToClipboard()
    {
        try
        {
            copied = true;
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", configText);
            ToastService.ShowToast("Config copied to clipboard.", ToastLevel.Success);
            await Task.Delay(1000);
            copied = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to copy to clipboard: {ex.Message}", ToastLevel.Error);
            Console.WriteLine($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    private void ShowConfirmation(string title, string message, Action onConfirm, Action? onCancel = null)
    {
        _confirmationTitle = title;
        _confirmationMessage = message;
        _confirmedAction = onConfirm;
        _cancelAction = onCancel;
        _isConfirmationVisible = true;
        StateHasChanged();
    }

    private void ConfirmAction()
    {
        _confirmedAction?.Invoke();
        _isConfirmationVisible = false;
    }

    private void CancelConfirmation()
    {
        _cancelAction?.Invoke();
        _isConfirmationVisible = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        ConfigStateService.OnStateChange -= HandleStateChange;
    }
}
