@using CSConfigGenerator.Interfaces
@inject IJSRuntime JSRuntime
@inject IPresetService PresetService
@implements IDisposable

<div class="config-editor">
    <div class="config-editor-header">
        <h3>Config Preview</h3>
        <div class="config-editor-actions">
            @if (PresetType != null)
            {
                <select class="form-select form-select-sm" @onchange="OnPresetSelected">
                    <option value="">-- Select a Preset --</option>
                    @foreach (var preset in _presets)
                    {
                        <option value="@preset">@preset</option>
                    }
                </select>
            }
            <button class="btn btn-sm btn-outline-primary" @onclick="CopyToClipboard" title="Copy to clipboard">
                @if (copied)
                {
                    <i class="bi bi-check-lg"></i>
                }
                else
                {
                    <i class="bi bi-clipboard"></i>
                }
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ResetToDefaults" title="Reset to defaults">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <textarea class="form-control config-editor-textarea"
              @oninput="OnTextInput"
              value="@configText"
              placeholder="Your generated config will appear here..."
              spellcheck="false" />
</div>

@code {
    [Parameter]
    [EditorRequired]
    public IConfigStateService ConfigStateService { get; set; } = default!;

    [Parameter]
    public string? PresetType { get; set; }

    private string configText = string.Empty;
    private bool copied = false;
    private List<string> _presets = new();

    protected override async Task OnInitializedAsync()
    {
        if (ConfigStateService == null)
            throw new InvalidOperationException("ConfigStateService is not set on ConfigEditor.");
        
        RefreshConfigText();
        ConfigStateService.OnStateChange += HandleStateChange;

        if (PresetType != null)
        {
            _presets = await PresetService.GetPresetNamesAsync(PresetType);
        }
    }

    private async Task OnPresetSelected(ChangeEventArgs e)
    {
        var presetName = e.Value?.ToString();
        if (!string.IsNullOrEmpty(presetName) && PresetType != null)
        {
            var presetContent = await PresetService.GetPresetContentAsync(PresetType, presetName);
            if (!string.IsNullOrEmpty(presetContent))
            {
                ConfigStateService.ParseConfigFile(presetContent, this);
                // Explicitly refresh the editor text content after parsing
                RefreshConfigText();
                StateHasChanged();
            }
        }
    }

    private void HandleStateChange(object? originator)
    {
        if (originator != this)
        {
            RefreshConfigText();
            StateHasChanged();
        }
    }

    private void RefreshConfigText()
    {
        configText = ConfigStateService.GenerateConfigFile();
    }

    private void OnTextInput(ChangeEventArgs e)
    {
        string? newValue = e.Value?.ToString();
        if (newValue != null && newValue != configText)
        {
            configText = newValue;
            try
            {
                ConfigStateService.ParseConfigFile(configText, this);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing config: {ex.Message}");
            }
        }
    }

    private void ResetToDefaults()
    {
        ConfigStateService.ResetToDefaults();
    }

    private async Task CopyToClipboard()
    {
        try
        {
            copied = true;
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", configText);
            await Task.Delay(1000);
            copied = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ConfigStateService.OnStateChange -= HandleStateChange;
    }
}