@using CSConfigGenerator.Components
@using CSConfigGenerator.Interfaces
@using CSConfigGenerator.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject IPresetService PresetService
@inject IUserConfigService UserConfigService
@inject IToastService ToastService
@implements IDisposable

<div class="config-editor">
    <div class="config-editor-header">
        <h3>Config Preview</h3>
        <div class="config-editor-actions">
            @if (PresetType != null)
            {
                <div class="custom-select-wrapper d-flex align-items-center">
                    <select class="custom-select" @onchange="OnPresetSelected" disabled="@_isLoadingPreset">
                        <option value="">Pro Configs</option>
                        @foreach (var preset in _presets)
                        {
                            <option value="@preset">@preset</option>
                        }
                    </select>
                    @if (_isLoadingPreset)
                    {
                        <div class="spinner-border spinner-border-sm text-light ms-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
            }
            <div class="custom-select-wrapper d-flex align-items-center">
                <select class="custom-select" @onchange="OnUserConfigSelected" disabled="@_isLoadingUserConfig">
                    <option value="">My Configs</option>
                    @foreach (var config in _userConfigs)
                    {
                        <option value="@config">@config</option>
                    }
                </select>
                @if (_isLoadingUserConfig)
                {
                    <div class="spinner-border spinner-border-sm text-light ms-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
            <button class="btn btn-sm btn-outline-success" @onclick="SaveConfig" title="Save current config">
                <i class="bi bi-save"></i>
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="CopyToClipboard" title="Copy to clipboard">
                @if (copied)
                {
                    <i class="bi bi-check-lg"></i>
                }
                else
                {
                    <i class="bi bi-clipboard"></i>
                }
            </button>
            <InputFile OnChange="OnUpload" class="d-none" @ref="_inputFile" accept=".cfg" />
            <button class="btn btn-sm btn-outline-info" @onclick="TriggerUpload" title="Upload a config file">
                <i class="bi bi-upload"></i>
            </button>
            <button class="btn btn-sm btn-outline-info" @onclick="DownloadConfig" title="Download current config">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ResetToDefaults" title="Reset to defaults">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <textarea class="form-control config-editor-textarea"
              @oninput="OnTextInput"
              value="@configText"
              placeholder="Your generated config will appear here..."
              spellcheck="false" />
</div>

<Modal Title="Save Config"
       IsOpen="@isSaveModalVisible"
       OnSubmit="HandleSaveModalSubmit"
       OnCancel="CloseSaveModal" />

@code {
    [Parameter]
    [EditorRequired]
    public IConfigStateService ConfigStateService { get; set; } = default!;

    [Parameter]
    public string? PresetType { get; set; }

    private string configText = string.Empty;
    private bool copied = false;
    private List<string> _presets = new();
    private List<string> _userConfigs = new();
    private InputFile? _inputFile;
    private bool isSaveModalVisible = false;
    private bool _isLoadingPreset;
    private bool _isLoadingUserConfig;

    protected override async Task OnInitializedAsync()
    {
        if (ConfigStateService == null)
            throw new InvalidOperationException("ConfigStateService is not set on ConfigEditor.");

        RefreshConfigText();
        ConfigStateService.OnStateChange += HandleStateChange;

        if (PresetType != null)
        {
            _presets = await PresetService.GetPresetNamesAsync(PresetType);
            await LoadUserConfigs();
        }
    }

    private async Task OnPresetSelected(ChangeEventArgs e)
    {
        var presetName = e.Value?.ToString();
        if (string.IsNullOrEmpty(presetName) || PresetType == null) return;

        _isLoadingPreset = true;
        try
        {
            var presetContent = await PresetService.GetPresetContentAsync(PresetType, presetName);
            if (!string.IsNullOrEmpty(presetContent))
            {
                ConfigStateService.ParseConfigFile(presetContent, this);
                RefreshConfigText();
                StateHasChanged();
            }
        }
        finally
        {
            _isLoadingPreset = false;
        }
    }

    private async Task OnUserConfigSelected(ChangeEventArgs e)
    {
        var configName = e.Value?.ToString();
        if (string.IsNullOrEmpty(configName) || PresetType == null) return;

        _isLoadingUserConfig = true;
        try
        {
            var configContent = await UserConfigService.GetConfigContentAsync(PresetType, configName);
            if (!string.IsNullOrEmpty(configContent))
            {
                ConfigStateService.ParseConfigFile(configContent, this);
                RefreshConfigText();
                StateHasChanged();
            }
        }
        finally
        {
            _isLoadingUserConfig = false;
        }
    }

    private async Task LoadUserConfigs()
    {
        if (PresetType != null)
        {
            _userConfigs = await UserConfigService.GetConfigNamesAsync(PresetType);
            StateHasChanged();
        }
    }

    private async Task SaveConfig()
    {
        isSaveModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSaveModalSubmit(string configName)
    {
        if (!string.IsNullOrEmpty(configName) && PresetType != null)
        {
            await UserConfigService.SaveConfigAsync(PresetType, configName, configText);
            await LoadUserConfigs();
            ToastService.ShowToast($"Config '{configName}' saved successfully.", ToastLevel.Success);
        }
        await CloseSaveModal();
    }

    private async Task CloseSaveModal()
    {
        isSaveModalVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var stream = file.OpenReadStream(file.Size);
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();
                ConfigStateService.ParseConfigFile(content, this);
                RefreshConfigText();
                StateHasChanged();
                ToastService.ShowToast($"Config '{file.Name}' uploaded successfully.", ToastLevel.Success);
            }
            catch (Exception ex)
            {
                ToastService.ShowToast($"Error uploading file: {ex.Message}", ToastLevel.Error);
            }
        }
    }

    private async Task DownloadConfig()
    {
        if (PresetType != null)
        {
            var fileName = $"{PresetType}_config.cfg";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, configText);
            ToastService.ShowToast("Config downloaded successfully.", ToastLevel.Success);
        }
    }

    private async Task TriggerUpload()
    {
        if (_inputFile?.Element != null)
        {
            await JSRuntime.InvokeVoidAsync("clickElement", _inputFile.Element);
        }
    }

    private void HandleStateChange(object? originator)
    {
        if (originator != this)
        {
            RefreshConfigText();
            StateHasChanged();
        }
    }

    private void RefreshConfigText()
    {
        configText = ConfigStateService.GenerateConfigFile();
    }

    private void OnTextInput(ChangeEventArgs e)
    {
        string? newValue = e.Value?.ToString();
        if (newValue != null && newValue != configText)
        {
            configText = newValue;
            try
            {
                ConfigStateService.ParseConfigFile(configText, this);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing config: {ex.Message}");
            }
        }
    }

    private void ResetToDefaults()
    {
        ConfigStateService.ResetToDefaults();
        ToastService.ShowToast("Config reset to default values.", ToastLevel.Info);
    }

    private async Task CopyToClipboard()
    {
        try
        {
            copied = true;
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", configText);
            ToastService.ShowToast("Config copied to clipboard.", ToastLevel.Success);
            await Task.Delay(1000);
            copied = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to copy to clipboard: {ex.Message}", ToastLevel.Error);
            Console.WriteLine($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ConfigStateService.OnStateChange -= HandleStateChange;
    }
}
