@using CSConfigGenerator.Components
@using CSConfigGenerator.Interfaces
@using CSConfigGenerator.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject IPresetService PresetService
@inject IUserConfigService UserConfigService
@inject IToastService ToastService
@implements IDisposable

<div class="config-editor">
    <div class="config-editor-header">
        <h3>Config Preview</h3>
        <div class="config-editor-actions">
            @if (PresetType != null)
            {
                <div class="custom-select-wrapper">
                    <select class="custom-select" @bind="SelectedPreset">
                        <option value="">Pro Configs</option>
                        @foreach (var preset in _presets)
                        {
                            <option value="@preset">@preset</option>
                        }
                    </select>
                </div>
            }
            <div class="custom-select-wrapper">
                <select class="custom-select" @bind="SelectedUserConfig">
                    <option value="">My Configs</option>
                    @foreach (var config in _userConfigs)
                    {
                        <option value="@config">@config</option>
                    }
                </select>
            </div>
            <button class="btn btn-sm btn-outline-success" @onclick="SaveConfig" title="Save current config">
                <i class="bi bi-save"></i>
            </button>
            <button class="btn btn-sm btn-outline-primary" @onclick="CopyToClipboard" title="Copy to clipboard">
                @if (copied)
                {
                    <i class="bi bi-check-lg"></i>
                }
                else
                {
                    <i class="bi bi-clipboard"></i>
                }
            </button>
            <InputFile OnChange="OnUpload" class="d-none" @ref="_inputFile" accept=".cfg" />
            <button class="btn btn-sm btn-outline-info" @onclick="TriggerUpload" title="Upload a config file">
                <i class="bi bi-upload"></i>
            </button>
            <button class="btn btn-sm btn-outline-info" @onclick="DownloadConfig" title="Download current config">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ResetToDefaults" title="Reset to defaults">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <textarea class="form-control config-editor-textarea"
              @oninput="OnTextInput"
              value="@configText"
              placeholder="Your generated config will appear here..."
              spellcheck="false" />
</div>

<Modal @ref="_saveModal"
       Title="Save Config"
       IsOpen="@isSaveModalVisible"
       OnSubmit="HandleSaveModalSubmit"
       OnCancel="CloseSaveModal"
       SubmitButtonText="Save">
    <ChildContent>
        <input type="text" class="form-control" @bind="_configNameToSave" @onkeydown="HandleSaveModalKeyDown" @onkeydown:preventDefault="true" placeholder="Enter name..." />
    </ChildContent>
</Modal>

<Modal Title="@_confirmationTitle"
       IsOpen="@_isConfirmationVisible"
       OnSubmit="HandleConfirmationSubmit"
       OnCancel="HandleConfirmationCancel"
       SubmitButtonText="Confirm">
    <ChildContent>
        @_confirmationMessage
    </ChildContent>
</Modal>


@code {
    [Parameter]
    [EditorRequired]
    public IConfigStateService ConfigStateService { get; set; } = default!;

    [Parameter]
    public string? PresetType { get; set; }

    private string configText = string.Empty;
    private bool copied = false;
    private List<string> _presets = new();
    private List<string> _userConfigs = new();
    private InputFile? _inputFile;
    private bool isSaveModalVisible = false;
    private string _configNameToSave = "";
    private Modal? _saveModal;

    // Dropdown selections
    private string _selectedPreset = "";
    private string _selectedUserConfig = "";

    // Confirmation modal state
    private bool _isConfirmationVisible = false;
    private string _confirmationTitle = "";
    private RenderFragment? _confirmationMessage;
    private Func<Task>? _confirmationAction;
    private Action? _cancellationAction;

    private string SelectedPreset
    {
        get => _selectedPreset;
        set => HandleDestructiveAction(value, ref _selectedPreset, "Load pro config",
            async (presetName) =>
            {
                if (string.IsNullOrEmpty(presetName) || PresetType == null) return;
                var presetContent = await PresetService.GetPresetContentAsync(PresetType, presetName);
                if (!string.IsNullOrEmpty(presetContent))
                {
                    ConfigStateService.ParseConfigFile(presetContent, this);
                    RefreshConfigText();
                    StateHasChanged();
                }
            });
    }

    private string SelectedUserConfig
    {
        get => _selectedUserConfig;
        set => HandleDestructiveAction(value, ref _selectedUserConfig, "Load saved config",
            async (configName) =>
            {
                if (string.IsNullOrEmpty(configName) || PresetType == null) return;

                var configContent = await UserConfigService.GetConfigContentAsync(PresetType, configName);
                if (!string.IsNullOrEmpty(configContent))
                {
                    ConfigStateService.ParseConfigFile(configContent, this);
                    RefreshConfigText();
                    StateHasChanged();
                }
            });
    }


    protected override async Task OnInitializedAsync()
    {
        if (ConfigStateService == null)
            throw new InvalidOperationException("ConfigStateService is not set on ConfigEditor.");

        RefreshConfigText();
        ConfigStateService.OnStateChange += HandleStateChange;

        if (PresetType != null)
        {
            _presets = await PresetService.GetPresetNamesAsync(PresetType);
            await LoadUserConfigs();
        }
    }

    private void HandleDestructiveAction(string? newValue, ref string currentValue, string actionName, Func<string, Task> action)
    {
        if (newValue == currentValue || string.IsNullOrEmpty(newValue))
        {
            // No real change, or selection was cleared
            currentValue = newValue ?? "";
            return;
        }

        var previousValue = currentValue;
        currentValue = newValue; // Temporarily update for UI to reflect change

        _confirmationTitle = actionName;
        _confirmationMessage = builder => builder.AddContent(0, $"Are you sure you want to {actionName.ToLower()} '{newValue}'? Your current changes will be lost.");
        _confirmationAction = () => action(newValue);
        _cancellationAction = () =>
        {
            currentValue = previousValue; // Revert on cancel
            StateHasChanged();
        };

        _isConfirmationVisible = true;
        StateHasChanged();
    }


    private async Task LoadUserConfigs()
    {
        if (PresetType != null)
        {
            _userConfigs = await UserConfigService.GetConfigNamesAsync(PresetType);
            StateHasChanged();
        }
    }

    private async Task SaveConfig()
    {
        isSaveModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSaveModalKeyDown(KeyboardEventArgs e)
    {
        if (_saveModal != null)
        {
            await _saveModal.HandleKeyDown(e);
        }
    }

    private async Task HandleSaveModalSubmit()
    {
        if (!string.IsNullOrEmpty(_configNameToSave) && PresetType != null)
        {
            await UserConfigService.SaveConfigAsync(PresetType, _configNameToSave, configText);
            await LoadUserConfigs();
            ToastService.ShowToast($"Config '{_configNameToSave}' saved successfully.", ToastLevel.Success);
        }
        await CloseSaveModal();
    }

    private async Task CloseSaveModal()
    {
        _configNameToSave = "";
        isSaveModalVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleConfirmationSubmit()
    {
        if (_confirmationAction != null)
        {
            await _confirmationAction();
        }
        CloseConfirmationModal();
    }

    private void HandleConfirmationCancel()
    {
        _cancellationAction?.Invoke();
        CloseConfirmationModal();
    }

    private void CloseConfirmationModal()
    {
        _isConfirmationVisible = false;
        _confirmationTitle = "";
        _confirmationMessage = null;
        _confirmationAction = null;
        _cancellationAction = null;
        StateHasChanged();
    }

    private async Task OnUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        _confirmationTitle = "Upload Config";
        _confirmationMessage = builder => builder.AddContent(0, $"Are you sure you want to load the config from '{file.Name}'? Your current changes will be lost.");
        _confirmationAction = async () =>
        {
            try
            {
                using var stream = file.OpenReadStream(file.Size);
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();
                ConfigStateService.ParseConfigFile(content, this);
                RefreshConfigText();
                StateHasChanged();
                ToastService.ShowToast($"Config '{file.Name}' uploaded successfully.", ToastLevel.Success);
            }
            catch (Exception ex)
            {
                ToastService.ShowToast($"Error uploading file: {ex.Message}", ToastLevel.Error);
            }
        };
        _cancellationAction = null; // No action on cancel
        _isConfirmationVisible = true;
        StateHasChanged();
    }

    private async Task DownloadConfig()
    {
        if (PresetType != null)
        {
            var fileName = $"{PresetType}_config.cfg";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, configText);
            ToastService.ShowToast("Config downloaded successfully.", ToastLevel.Success);
        }
    }

    private async Task TriggerUpload()
    {
        if (_inputFile?.Element != null)
        {
            await JSRuntime.InvokeVoidAsync("clickElement", _inputFile.Element);
        }
    }

    private void HandleStateChange(object? originator)
    {
        if (originator != this)
        {
            RefreshConfigText();
            StateHasChanged();
        }
    }

    private void RefreshConfigText()
    {
        configText = ConfigStateService.GenerateConfigFile();
    }

    private void OnTextInput(ChangeEventArgs e)
    {
        string? newValue = e.Value?.ToString();
        if (newValue != null && newValue != configText)
        {
            configText = newValue;
            try
            {
                ConfigStateService.ParseConfigFile(configText, this);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing config: {ex.Message}");
            }
        }
    }

    private void ResetToDefaults()
    {
        _confirmationTitle = "Reset to Defaults";
        _confirmationMessage = builder => builder.AddContent(0, "Are you sure you want to reset the configuration to its default values? All your current changes will be lost.");
        _confirmationAction = () =>
        {
            ConfigStateService.ResetToDefaults();
            ToastService.ShowToast("Config reset to default values.", ToastLevel.Info);
            return Task.CompletedTask;
        };
        _cancellationAction = null;
        _isConfirmationVisible = true;
        StateHasChanged();
    }

    private async Task CopyToClipboard()
    {
        try
        {
            copied = true;
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", configText);
            ToastService.ShowToast("Config copied to clipboard.", ToastLevel.Success);
            await Task.Delay(1000);
            copied = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to copy to clipboard: {ex.Message}", ToastLevel.Error);
            Console.WriteLine($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ConfigStateService.OnStateChange -= HandleStateChange;
    }
}
