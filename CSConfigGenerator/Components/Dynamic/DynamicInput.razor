@using CSConfigGenerator.Models
@using CSConfigGenerator.ViewModels

@if (ViewModel.Setting.Status == SettingStatus.Visible || ViewModel.Setting.Status == SettingStatus.Added)
{
    <div class="mb-3">
        <div class="d-flex justify-content-between">
            <label class="form-label" for="@ViewModel.Command.Name">@ViewModel.Command.Description</label>
            <button class="btn btn-sm btn-outline-danger" @onclick="ViewModel.Remove">Remove</button>
        </div>
        
        @switch (ViewModel.Command.Type)
        {
            case SettingType.Bool:
                <input type="checkbox" id="@ViewModel.Command.Name" class="form-check-input" @bind="BoolValue" />
                break;
            case SettingType.Int:
                <input type="number" id="@ViewModel.Command.Name" class="form-control" @bind="IntValue" @bind:event="oninput" />
                break;
            case SettingType.Float:
                <input type="number" id="@ViewModel.Command.Name" class="form-control" @bind="FloatValue" @bind:event="oninput" />
                break;
            case SettingType.Enum:
                <select id="@ViewModel.Command.Name" class="form-control" @bind="StringValue">
                    @if (ViewModel.Command.Options != null)
                    {
                        @foreach (var option in ViewModel.Command.Options)
                        {
                            <option value="@option.Key">@option.Value</option>
                        }
                    }
                </select>
                break;
            case SettingType.String:
            default:
                <input type="text" id="@ViewModel.Command.Name" class="form-control" @bind="StringValue" />
                break;
        }
        
        <small class="form-text text-muted">Command: <code>@ViewModel.Command.Name</code></small>
    </div>
}
else if (ViewModel.Setting.Status == SettingStatus.Removed)
{
    <div class="mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="form-label text-muted">@ViewModel.Command.Description</span>
                <span class="badge bg-secondary">Removed</span>
            </div>
            <button class="btn btn-sm btn-outline-success" @onclick="ViewModel.Restore">Restore</button>
        </div>
        <small class="form-text text-muted">Command: <code>@ViewModel.Command.Name</code></small>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public SettingViewModel ViewModel { get; set; } = null!;

    private bool BoolValue { get => (bool)ViewModel.Value; set => ViewModel.Value = value; }
    private int IntValue { get => (int)ViewModel.Value; set => ViewModel.Value = value; }
    private float FloatValue { get => (float)ViewModel.Value; set => ViewModel.Value = value; }
    private string StringValue { get => (string)ViewModel.Value; set => ViewModel.Value = value; }
}