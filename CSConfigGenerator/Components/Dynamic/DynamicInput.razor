@using CSConfigGenerator.Models
@using CSConfigGenerator.Services
@inject IConfigStateService ConfigState

<div class="mb-3">
    <label class="form-label" for="@Command.Name">@Command.Description</label>
    
    @switch (Command.Type.ToLower())
    {
        case "bool":
            <input type="checkbox" 
                   id="@Command.Name" 
                   class="form-check-input" 
                   @bind="BoolValue" />
            break;
            
        case "int":
            <input type="number" 
                   id="@Command.Name" 
                   class="form-control" 
                   @bind="IntValue"
                   min="@((int?)Command.MinValue)"
                   max="@((int?)Command.MaxValue)"
                   step="@((int?)Command.Step ?? 1)" />
            break;
            
        case "float":
            <input type="number" 
                   id="@Command.Name" 
                   class="form-control" 
                   @bind="FloatValue"
                   min="@Command.MinValue"
                   max="@Command.MaxValue"
                   step="@(Command.Step?.ToString() ?? "0.01")" />
            break;
            
        case "enum":
            <select id="@Command.Name" 
                    class="form-control" 
                    @bind="StringValue">
                @if (Command.Options != null)
                {
                    @foreach (var option in Command.Options)
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                }
            </select>
            break;
            
        default:
            <input type="text" 
                   id="@Command.Name" 
                   class="form-control" 
                   @bind="StringValue" />
            break;
    }
    
    <small class="form-text text-muted">Command: @Command.Name</small>
</div>

@code {
    [Parameter, EditorRequired]
    public CommandDefinition Command { get; set; } = null!;

    private bool BoolValue
    {
        get => ConfigState.GetSetting<bool>(Command.Name);
        set => ConfigState.UpdateSetting(Command.Name, value);
    }

    private int IntValue
    {
        get => ConfigState.GetSetting<int>(Command.Name);
        set => ConfigState.UpdateSetting(Command.Name, value);
    }

    private float FloatValue
    {
        get => ConfigState.GetSetting<float>(Command.Name);
        set => ConfigState.UpdateSetting(Command.Name, value);
    }

    private string StringValue
    {
        get => ConfigState.GetSetting<string>(Command.Name);
        set => ConfigState.UpdateSetting(Command.Name, value ?? string.Empty);
    }
}