@page "/config/{ConfigType}"
@using CSConfigGenerator.Components
@using CSConfigGenerator.Components.Dynamic
@using CSConfigGenerator.Interfaces
@using CSConfigGenerator.Models
@using CSConfigGenerator.ViewModels
@implements IDisposable

<PageTitle>@Title</PageTitle>

<div class="row g-1 h-100">
    <div class="col-lg-8">
        <div class="p-3">
            <h1>@Title</h1>
            <p class="text-muted">@Description</p>

            @if (ConfigSections.Any())
            {
                @foreach (var section in ConfigSections)
                {
                    var viewModels = section.Commands
                        .Where(c => !c.UiData.HideFromDefaultView)
                        .Select(c => _settingViewModels[c.Command])
                        .ToList();

                    <ConfigSectionGroup Section="section" SettingViewModels="viewModels" />
                }

                <div class="mb-3">
                    <button class="btn btn-secondary" @onclick="ResetToDefaults">
                        Reset to Defaults
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <h4>No Commands Loaded</h4>
                    <p>No command definitions were found. Make sure your schema files are properly configured.</p>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-4 h-100">
        <ConfigEditor ConfigStateService="@ConfigStateService" PresetType="@ConfigType?.ToLower()" />
    </div>
</div>

@code {
    [Parameter]
    public string? ConfigType { get; set; }

    [Inject(Key="PlayerConfigStateServiceKey")]
    public IConfigStateService PlayerConfigStateService { get; set; } = default!;

    [Inject(Key="ServerConfigStateServiceKey")]
    public IConfigStateService ServerConfigStateService { get; set; } = default!;

    [Inject]
    public ISchemaService SchemaService { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private IConfigStateService ConfigStateService { get; set; } = default!;
    private IReadOnlyList<ConfigSection> ConfigSections { get; set; } = new List<ConfigSection>();
    private string Title { get; set; } = "Settings";
    private string Description { get; set; } = "Configure your settings. Changes are reflected in real-time in the config editor.";

    private readonly Dictionary<string, SettingViewModel> _settingViewModels = new();

    protected override void OnParametersSet()
    {
        if (string.Equals(ConfigType, "player", StringComparison.OrdinalIgnoreCase))
        {
            ConfigStateService = PlayerConfigStateService;
            ConfigSections = SchemaService.PlayerSections;
            Title = "Player Settings";
            Description = "Configure your player settings. Changes are reflected in real-time in the config editor.";
        }
        else if (string.Equals(ConfigType, "server", StringComparison.OrdinalIgnoreCase))
        {
            ConfigStateService = ServerConfigStateService;
            ConfigSections = SchemaService.ServerSections;
            Title = "Server Settings";
            Description = "Configure your server settings. Changes are reflected in real-time in the config editor.";
        }
        else
        {
            // if the config type is invalid, navigate to the player config page by default
            NavigationManager.NavigateTo("/config/player", replace: true);
            return;
        }

        // Unsubscribe from previous service's event to avoid memory leaks and multiple triggers
        if (ConfigStateService != null)
        {
            ConfigStateService.OnStateChange -= HandleStateHasChanged;
        }

        ConfigStateService.OnStateChange += HandleStateHasChanged;

        _settingViewModels.Clear();
        foreach (var section in ConfigSections)
        {
            foreach (var command in section.Commands.Where(c => !c.UiData.HideFromDefaultView))
            {
                _settingViewModels[command.Command] = new SettingViewModel(command, ConfigStateService);
            }
        }
    }

    private void HandleStateHasChanged(object? originator)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ResetToDefaults()
    {
        ConfigStateService.ResetToDefaults();
    }

    public void Dispose()
    {
        if (ConfigStateService != null)
        {
            ConfigStateService.OnStateChange -= HandleStateHasChanged;
        }
    }
}
