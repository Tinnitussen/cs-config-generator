@page "/serverconfig"
@using CSConfigGenerator.Components
@using CSConfigGenerator.Components.Dynamic
@using CSConfigGenerator.Interfaces
@using CSConfigGenerator.ViewModels
@using CSConfigGenerator.Services
@implements IDisposable

<PageTitle>Server Settings</PageTitle>

<div class="row g-1 h-100">
    <div class="col-lg-8">
        <div class="p-3">
            <h1>Server Settings</h1>
            <p class="text-muted">Configure your server settings. Changes are reflected in real-time in the config editor.</p>

            @if (SchemaService.ServerSections.Any())
            {
                @foreach (var section in SchemaService.ServerSections)
                {
                    var viewModels = section.Commands
                        .Where(c => !c.UiData.HideFromDefaultView)
                        .Select(c => _settingViewModels[c.Command])
                        .ToList();

                    <ConfigSectionGroup Section="section" SettingViewModels="viewModels" />
                }

                <div class="mb-3">
                    <button class="btn btn-secondary" @onclick="ResetToDefaults">
                        Reset to Defaults
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <h4>No Commands Loaded</h4>
                    <p>No command definitions were found. Make sure your schema files are properly configured.</p>
                </div>
            }
        </div>
    </div>
    <div class="col-lg-4 h-100">
        <ConfigEditor ConfigStateService="@ServerConfigStateService" PresetType="server" />
    </div>
</div>

@code {
    [Inject(Key="ServerConfigStateServiceKey")]
    public IConfigStateService ServerConfigStateService { get; set; } = default!;
    [Inject]
    public ISchemaService SchemaService { get; set; } = default!;
    [Inject]
    public ToastService ToastService { get; set; } = default!;

    private readonly Dictionary<string, SettingViewModel> _settingViewModels = new();

    protected override void OnInitialized()
    {
        ServerConfigStateService.OnStateChange += HandleStateHasChanged;

        foreach (var section in SchemaService.ServerSections)
        {
            foreach (var command in section.Commands.Where(c => !c.UiData.HideFromDefaultView))
            {
                _settingViewModels[command.Command] = new SettingViewModel(command, ServerConfigStateService);
            }
        }
    }

    private void HandleStateHasChanged(object? originator)
    {
        StateHasChanged();
    }

    private void ResetToDefaults()
    {
        ServerConfigStateService.ResetToDefaults();
        ToastService.ShowToast("Server config reset to default values.", ToastLevel.Info);
    }

    public void Dispose()
    {
        ServerConfigStateService.OnStateChange -= HandleStateHasChanged;
    }
}