@page "/playerconfig"
@using CSConfigGenerator.Components
@using CSConfigGenerator.Components.Dynamic
@using CSConfigGenerator.Services
@using Microsoft.Extensions.DependencyInjection
@implements IDisposable

<PageTitle>Player Settings</PageTitle>

<h1>Player Settings</h1>
<p>Configure your player settings. Changes are reflected in real-time in the config editor.</p>

@if (SchemaService.Sections.Any())
{
    <div class="row">
        <div class="col-md-6">
            @foreach (var section in SchemaService.Sections)
            {
                <ConfigSectionGroup Section="section" ConfigStateService="@PlayerConfigStateService" />
            }
            
            <div class="mb-3">
                <button class="btn btn-secondary" @onclick="ResetToDefaults">
                    Reset to Defaults
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">
        <h4>No Commands Loaded</h4>
        <p>No command definitions were found. Make sure your schema files are properly configured.</p>
    </div>
}

<ConfigEditor ConfigStateService="@PlayerConfigStateService"/>

@code {
    [Inject(Key="PlayerConfigStateServiceKey")]
    public IConfigStateService PlayerConfigStateService { get; set; } = default!;
    [Inject]
    public ISchemaService SchemaService { get; set; } = default!;
    protected override void OnInitialized()
    {
        PlayerConfigStateService.OnStateChange += HandleStateHasChanged;
    }

    private void HandleStateHasChanged(object? originator)
    {
            StateHasChanged();
    }
    private void ResetToDefaults()
    {
        PlayerConfigStateService.ResetToDefaults();
    }
    public void Dispose()
    {
        PlayerConfigStateService.OnStateChange -= HandleStateHasChanged;
    }
}