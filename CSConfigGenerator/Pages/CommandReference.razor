@page "/reference"
@using CSConfigGenerator.Models
@using CSConfigGenerator.Services
@using CSConfigGenerator.ViewModels
@using CSConfigGenerator.Components
@inject ISchemaService SchemaService
@inject ToastService ToastService

<PageTitle>Command Reference</PageTitle>

<div class="row g-0 h-100">
    <div class="col-lg-9 pe-2">
        <h1>Command Reference</h1>
        <p class="text-muted">Browse, search, and manage all available commands for your configuration.</p>

        <div class="card bg-light mb-2">
            <div class="card-body p-2">
                <div class="row g-2 align-items-center">
                    <div class="col-md-12">
                        <input @bind="searchTerm" @bind:event="oninput" class="form-control form-control-sm" placeholder="Search commands..." />
                    </div>
                </div>
                <div class="row g-2 align-items-center mt-1">
                    <div class="col-md-6">
                        <strong>Type:</strong>
                        @foreach (var type in Enum.GetValues<SettingType>())
                        {
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="type-@type" @onchange="() => ToggleTypeSelection(type)" />
                                <label class="form-check-label" for="type-@type">@type</label>
                            </div>
                        }
                    </div>
                    <div class="col-md-4">
                        <strong>Status:</strong>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="status-included" @onchange="() => ToggleInclusionSelection(true)" />
                            <label class="form-check-label" for="status-included">Included</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="status-not-included" @onchange="() => ToggleInclusionSelection(false)" />
                            <label class="form-check-label" for="status-not-included">Not Included</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-check form-check-inline">
                            <input @bind="requiresCheatsFilter" class="form-check-input" type="checkbox" id="cheatsFilter" />
                            <label class="form-check-label" for="cheatsFilter">Cheats</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (paginatedViewModels.Any())
        {
            <div class="table-responsive">
                <table class="table table-sm table-striped table-hover command-table">
                    <thead class="table-dark">
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th class="text-center">Status</th>
                            <th class="text-center">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var vm in paginatedViewModels)
                        {
                            <tr @onclick="() => HighlightRow(vm)" @ondblclick="() => ToggleCommand(vm)" class="@(selectedViewModel == vm ? "table-active" : "")">
                                <td><code>@vm.Command.Command</code></td>
                                <td>@vm.Command.UiData.HelperText</td>
                                <td class="text-center">
                                    <span class="badge @vm.StatusBadgeClass">
                                        @(vm.Setting.IsInConfigEditor ? "Included" : "Not Included")
                                    </span>
                                </td>
                                <td class="text-center">
                                    @if (!vm.Setting.IsInConfigEditor)
                                    {
                                        <button class="btn btn-xs btn-outline-success" @onclick="() => AddCommand(vm)">
                                            Add
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-xs btn-outline-danger" @onclick="() => vm.Remove()">
                                            Remove
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-3">
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ChangePage(-1)" disabled="@(_currentPage <= 1)">Previous</button>
                <span>Page @_currentPage of @totalPages</span>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ChangePage(1)" disabled="@(_currentPage >= totalPages)">Next</button>
            </div>
        }
        else
        {
            <p>No commands found matching your criteria.</p>
        }
    </div>
    <div class="col-lg-3 h-100">
        <ConfigEditor ConfigStateService="@PlayerConfigStateService"/>
    </div>
</div>

@code {
    [Inject(Key="PlayerConfigStateServiceKey")]
    public IConfigStateService PlayerConfigStateService { get; set; } = default!;
    
    private string _searchTerm = string.Empty;
    private string searchTerm 
    {
        get => _searchTerm;
        set { _searchTerm = value; _currentPage = 1; }
    }

    private List<SettingType> selectedTypes = new();
    private List<bool> selectedInclusions = new();

    private bool _requiresCheatsFilter;
    private bool requiresCheatsFilter 
    {
        get => _requiresCheatsFilter;
        set { _requiresCheatsFilter = value; _currentPage = 1; }
    }

    private List<SettingViewModel> allViewModels = [];
    private SettingViewModel? selectedViewModel;
    private int _currentPage = 1;
    private const int PageSize = 50;
    
    private List<SettingViewModel> filteredViewModels =>
        allViewModels
            .Where(vm => string.IsNullOrWhiteSpace(searchTerm) || vm.Command.Command.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || vm.Command.UiData.HelperText.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(vm => !selectedTypes.Any() || selectedTypes.Contains(vm.Command.UiData.Type))
            .Where(vm => !selectedInclusions.Any() || selectedInclusions.Contains(vm.Setting.IsInConfigEditor))
            .Where(vm => !requiresCheatsFilter || vm.Command.UiData.RequiresCheats)
            .ToList();

    private IEnumerable<SettingViewModel> paginatedViewModels =>
        filteredViewModels
            .Skip((_currentPage - 1) * PageSize)
            .Take(PageSize);

    private int totalPages => (int)Math.Ceiling(filteredViewModels.Count / (double)PageSize);

    protected override void OnInitialized()
    {
        var allCommands = SchemaService.Sections.SelectMany(s => s.Commands).OrderBy(c => c.Command);
        allViewModels = allCommands.Select(c => new SettingViewModel(c, PlayerConfigStateService)).ToList();
        PlayerConfigStateService.OnStateChange += (o) => InvokeAsync(StateHasChanged);
    }

    private void ToggleTypeSelection(SettingType type)
    {
        if (selectedTypes.Contains(type))
        {
            selectedTypes.Remove(type);
        }
        else
        {
            selectedTypes.Add(type);
        }
        _currentPage = 1;
    }

    private void ToggleInclusionSelection(bool isInclusion)
    {
        if (selectedInclusions.Contains(isInclusion))
        {
            selectedInclusions.Remove(isInclusion);
        }
        else
        {
            selectedInclusions.Add(isInclusion);
        }
        _currentPage = 1;
    }

    private void HighlightRow(SettingViewModel vm)
    {
        selectedViewModel = vm;
    }

    private void ToggleCommand(SettingViewModel vm)
    {
        if (vm.Setting.IsInConfigEditor)
        {
            vm.Remove();
            ToastService.ShowToast($"'{vm.Command.Command}' has been removed from your config.", ToastLevel.Warning);
        }
        else
        {
            AddCommand(vm);
        }
    }

    private void AddCommand(SettingViewModel vm)
    {
        vm.Add();
        ToastService.ShowToast($"'{vm.Command.Command}' has been added to your config.", ToastLevel.Success);
    }

    private void ChangePage(int amount)
    {
        var newPage = _currentPage + amount;
        if (newPage >= 1 && newPage <= totalPages)
        {
            _currentPage = newPage;
        }
    }

    public void Dispose()
    {
        PlayerConfigStateService.OnStateChange -= (o) => InvokeAsync(StateHasChanged);
    }
}